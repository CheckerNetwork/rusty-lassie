name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2 # Fail cache download after 2 minutes.

jobs:
  build-test:
    name: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@52e69531e6f69a396bc9d1226284493a5db969ff # v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894 # v2.4.0
        with:
          shared-key: ${{ matrix.target }}
          # Always save the build artifacts to the cache to speed up builds of additional
          # commits added to an already-opened pull request.
          # save-if: ${{ github.ref == 'refs/heads/main' }}


      - name: Build the library
        run: cargo build --lib --all-features --target=${{ matrix.target }}

      - name: Run all tests
        run: cargo test --all-features --target=${{ matrix.target }}

  lint:
    name: Run Rust linters
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@52e69531e6f69a396bc9d1226284493a5db969ff # v1
        with:
          toolchain: stable
          components: clippy,rustfmt

      - uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894 # v2.4.0
        with:
          shared-key: "x86_64-unknown-linux-gnu"
          save-if: false

      - name: Check Rust formatting
        run: cargo fmt -- --check

      - name: Run cargo clippy
        run: cargo clippy # cargo alias to allow reuse of config locally

      - name: Check rustdoc links
        run: RUSTDOCFLAGS="--deny rustdoc::broken_intra_doc_links --deny warnings" cargo doc --verbose --workspace --no-deps --all-features --document-private-items

  prettier-check:
    name: Check Markdown formatting (Prettier)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionsx/prettier@e90ec5455552f0f640781bdd5f5d2415acb52f1a # latest
        with:
          # prettier CLI arguments.
          args: --check .

  validate_pr_title:
    name: Validate PR title
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: amannn/action-semantic-pull-request@c3cd5d1ea3580753008872425915e343e351ab54 # v5.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline delimited).
          types: |
            feat
            fix
            chore
            docs
            deps
            test
            ci
            refactor
          requireScope: false

      - name: Check PR title length
        env:
          TITLE: ${{ github.event.pull_request.title }}
        run: |
          title_length=${#TITLE}
          if [ $title_length -gt 72 ]
          then
            echo "PR title is too long (greater than 72 characters)"
            exit 1
          fi
